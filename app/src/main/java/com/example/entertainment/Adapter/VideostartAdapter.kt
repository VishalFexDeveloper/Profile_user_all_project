package com.example.entertainment.Adapterimport com.example.entertainment.VideoPlayerActivityimport android.annotation.SuppressLintimport android.content.Contextimport android.content.Intentimport android.net.Uriimport android.provider.MediaStoreimport android.text.format.DateUtilsimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.ImageViewimport android.widget.LinearLayoutimport android.widget.TextViewimport androidx.core.content.ContextCompatimport androidx.recyclerview.widget.RecyclerViewimport com.bumptech.glide.Glideimport com.bumptech.glide.request.RequestOptionsimport com.example.entertainment.ModalData.Musicimport com.example.entertainment.ModalData.VideoDataMadalimport com.example.entertainment.Rimport com.google.android.material.imageview.ShapeableImageViewimport java.io.Fileimport java.lang.Exceptionclass VideostartAdapter(val context: Context, var videolist:MutableList<VideoDataMadal>, private val isFolder:Boolean = false, private var isGrid:Boolean = false):    RecyclerView.Adapter<VideostartAdapter.ViewHolder>(){    inner class ViewHolder(binding: View): RecyclerView.ViewHolder(binding){        val videoImage = itemView.findViewById<ShapeableImageView>(R.id.videoImage)        val videoname = itemView.findViewById<TextView>(R.id.videoName)        val foldername = itemView.findViewById<TextView>(R.id.folderName_Video)        val durationText = itemView.findViewById<TextView>(R.id.durationText)        val layoutview = itemView.findViewById<LinearLayout>(R.id.videosList_Layout)        //grid view        val videoImageGRid = itemView.findViewById<ShapeableImageView>(R.id.videoImage_grid)        val videonameGRid = itemView.findViewById<TextView>(R.id.videoName_grid)        val foldernameGRid = itemView.findViewById<TextView>(R.id.folderName_Video_grid)        val durationTextGRid = itemView.findViewById<TextView>(R.id.durationTextGrid)        val layoutviewGRid = itemView.findViewById<LinearLayout>(R.id.videosList_LayoutGrid)    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {        if (isGrid){            val gridLayout = LayoutInflater.from(context).inflate(R.layout.grid_layoutview_videos,parent,false)            return ViewHolder(gridLayout)        }else{            return ViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.video_viewlayout,parent,false))        }    }    override fun getItemCount(): Int {        return videolist.size    }    @SuppressLint("SetTextI18n", "CheckResult")    override fun onBindViewHolder(holder: ViewHolder, position: Int) {        if (isGrid){            holder.videonameGRid.text = videolist[position].title            holder.foldernameGRid.text = videolist[position].folder            holder.durationTextGRid.text = DateUtils.formatElapsedTime(videolist[position].duration / 1000)            val imgList = arrayOf(R.drawable.img)            Glide.with(context)                .load(videolist[position].artUri)                .apply(                    RequestOptions()                        .placeholder(imgList.random())                )                .into(holder.videoImageGRid)            holder.layoutviewGRid.setOnClickListener {                when{                    isFolder -> {                        sendIntent(pos = position, ref = "FolderActivity")                    }                    else ->{                        sendIntent(pos = position, ref = "AllVideos")                    }                }            }        }else{        holder.videoname.text = videolist[position].title        holder.foldername.text = videolist[position].folder        holder.durationText.text = DateUtils.formatElapsedTime(videolist[position].duration / 1000)        val imgList = arrayOf(R.drawable.img)        Glide.with(context)            .load(videolist[position].artUri)            .apply(                RequestOptions()                    .placeholder(imgList.random())            )            .into(holder.videoImage)        holder.layoutview.setOnClickListener {            when{                isFolder -> {                    VideoPlayerActivity.pipStatus = 1                    sendIntent(pos = position, ref = "FolderActivity")                }                else ->{                    VideoPlayerActivity.pipStatus = 2                    sendIntent(pos = position, ref = "AllVideos")                }            }        }        }    }    private fun sendIntent(pos :Int , ref :String){        VideoPlayerActivity.position = pos        val intent = Intent(context, VideoPlayerActivity::class.java)        intent.putExtra("class",ref)        ContextCompat.startActivity(context,intent,null)    }    @SuppressLint("NotifyDataSetChanged")    fun refreshData(newNotes:List<VideoDataMadal>){        videolist = newNotes.toMutableList()        notifyDataSetChanged()    }}