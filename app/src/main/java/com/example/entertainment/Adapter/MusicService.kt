package com.example.entertainment.Adapterimport android.annotation.SuppressLintimport android.app.PendingIntentimport android.content.Intentimport android.graphics.BitmapFactoryimport android.os.Binderimport android.os.IBinderimport android.media.MediaPlayerimport android.os.Handlerimport android.os.Looperimport android.support.v4.media.session.MediaSessionCompatimport com.example.entertainment.ModalData.formatDurationimport com.example.entertainment.ModalData.getImgArtimport com.example.entertainment.PlayerActivityimport com.example.entertainment.Rclass MusicService : android.app.Service() {    private var myBinder = MyBinder()    var mediaPlayer: MediaPlayer? = null    private lateinit var mediaSession:MediaSessionCompat    private lateinit var runnable: Runnable    override fun onBind(intent: Intent?): IBinder {        mediaSession = MediaSessionCompat(baseContext,"My Music")        return myBinder    }    inner class MyBinder : Binder() {        fun currentService(): MusicService {            return this@MusicService        }    }    @SuppressLint("ForegroundServiceType")    fun showNotification(playPauseBtn: Int) {        val prevIntent = Intent(baseContext, NotificationReceiver::class.java).setAction(ApplicationClass.PREVIOUS)        val PrevPendingIntent = PendingIntent.getBroadcast(            baseContext,            0,            prevIntent,            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_MUTABLE        )        val playIntent = Intent(baseContext, NotificationReceiver::class.java).setAction(ApplicationClass.PLAY)        val PlayPendingIntent = PendingIntent.getBroadcast(            baseContext,            0,            playIntent,            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_MUTABLE        )        val nextIntent = Intent(baseContext, NotificationReceiver::class.java).setAction(ApplicationClass.NEXT)        val nextPendingIntent = PendingIntent.getBroadcast(            baseContext,            0,            nextIntent,            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_MUTABLE        )        val exitIntent = Intent(baseContext, NotificationReceiver::class.java).setAction(ApplicationClass.EXIT)        val exitPendingIntent = PendingIntent.getBroadcast(            baseContext,            0,            exitIntent,            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_MUTABLE        )        val imgArt = getImgArt(PlayerActivity.musicListPlayer[PlayerActivity.songPosition].path)        val image = if (imgArt != null){           BitmapFactory.decodeByteArray(imgArt,0,imgArt.size)        }else{            BitmapFactory.decodeResource(resources, R.drawable.streamio)        }        val notification = androidx.core.app.NotificationCompat.Builder(baseContext, ApplicationClass.Channel_ID)            .setContentTitle(PlayerActivity.musicListPlayer[PlayerActivity.songPosition].title)            .setContentText(PlayerActivity.musicListPlayer[PlayerActivity.songPosition].artist)            .setSmallIcon(R.drawable.musical_note)            .setLargeIcon(image)            .setStyle(androidx.media.app.NotificationCompat.MediaStyle().setMediaSession(mediaSession.sessionToken))            .setPriority(androidx.core.app.NotificationCompat.PRIORITY_HIGH)            .setVisibility(androidx.core.app.NotificationCompat.VISIBILITY_PUBLIC)            .setOnlyAlertOnce(true)            .addAction(R.drawable.not_prev_btn, "Previous", PrevPendingIntent)            .addAction(playPauseBtn, "Play", PlayPendingIntent)            .addAction(R.drawable.not_next_btn, "Next", nextPendingIntent)            .addAction(R.drawable.exit, "Exit", exitPendingIntent)            .build()        startForeground(12, notification)    }    fun seekBarSetup(){        runnable = Runnable {            PlayerActivity.tvSeekbarStart.text = formatDuration(mediaPlayer!!.currentPosition.toLong())            PlayerActivity.seekbarPa.progress = mediaPlayer!!.currentPosition            Handler(Looper.getMainLooper()).postDelayed(runnable,200)        }        Handler(Looper.getMainLooper()).postDelayed(runnable,0)    }}